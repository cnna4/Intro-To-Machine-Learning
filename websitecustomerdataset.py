# -*- coding: utf-8 -*-
"""WebsiteCustomerDataset

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o6wspzd-VuWgUQ5xaPsJrcc5doaq5sMq

# Midterm Project
This is a Ecommerce dataset which provides customer infomation such as email, address and their color Avatar. It also contains the following numeric features such as:


*   Avg. Session Length: average session of in-store style advice sessions.
*   Time on App: Average time spent on App (in minutes).
* Time on Website: Average time spent on company website (in minutes).
* Length of Membership: The number of years that a customer has been a member.

The target variable is the "Yearly Amount Spent".

**Objective**

The objective of the midterm project is to use the continuous features including "Avg. Session Length",
"Time on App", "Time on Website", and "Length of Membership" to predict the "Yearly Amount Spent".

**Evaluation**
The total score for this midterm project is 25. In the final grades, it will contribute 20% of your final grades, which means if you get 25 for the midterm, this is worth 20 out of 100 in your final grades.

**Deadline**
The deadline to submit this midterm project on Canvas is Friday 5 pm March 25th.

**Take Home Exam Policy**
Follow our university academic integrity policy.
You should not be posting or accessing exam questions or responses to questions on sharing sites. You cannot share answers or codes to your classmates. If any form of cheating is found, both parties involved will get a zero score of the midterm. If you need any
clarifications about the midterm questions, feel free to ask me. However, you cannot ask me for answers to the questions in the midterm. You are free to use online resources such as Google to read and understand the documentation of the python functions that can help you.
"""

## Upload the dataset
from google.colab import files
upload = files.upload()

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
################################################
### ToDO########################################
## Use pd.read_csv() to read Customers.txt into
## a pandas dataframe called df
## 1 point

import pandas as pd
df = pd.read_csv('Customers.txt')
df.shape

#####ToDO#########################################
## get initial impression of the dataset
## use head() function
### show the first five lines of the dataframe
## 1 point

df.head()

####ToDO###########################################
## Use .describe() function of the dataframe df
## to see the summary of all continuous variables

df.describe()
## 1 point

#####ToDO#################################
## Use the info() function of dataframe df
## to identify
## 1 point

df.info()


## 1 point
## answer which variables
## are continuous and which variables are categorical

## A: Email, Adress, Avatar A are all Catagorical variables
##  Avg. Session Length,Time on App, Time on Website, Length of Membership Yearly Amount Spent are all Contiinouos varibales

##### ToDO ###############################################
## create a data frame that only have continuous variables
## in the data frame including  including "Avg. Session Length",
## "Time on App", "Time on Website", and "Length of Membership"
## and "Yearly Amount Spent".
## 1 point

numeric_df = df.select_dtypes(include=['float64'])
numeric_df.head()

##### ToDO ###############################################
## create a heatmap plot to show the pairwise correlation
## each pair of variables in numeric_df
## If you forget how to do it, please refer to our Assignment2
## 2 points
from numpy.ma.core import correlate

numeric_df.corr()
plt.figure(figsize=(25,16))

correlation = numeric_df.corr()
sns.heatmap(correlation, annot = True)
plt.show()




## Answer: Which variable has the highest correlation with the target
## variable "Yearly Amount Spent"
## 1 point

## A: The highest correlation with the target variable "Yearly Amount Spent" is
## Length Of Membership

##### ToDO ####################################
### create pairwise scatter plot between each pair
### of the variables including Avg. Session Length,
### Time on App, Time on Website, Length of membership
### and Yearly Amount Spent.
### Use sns.pairplot to complete this question.
### You can learn how to use sns.pairplot here:
### https://seaborn.pydata.org/generated/seaborn.pairplot.html
### 1 point

##for feature in numeric_df.columns:

sns.pairplot(numeric_df)

### ToDO#####################################################
## Drop the "Yearly Amount Spent" feature from your numeric_df
## and set the result to be your feature matrix X
## Your feature matrix X should include:Avg. Session Length,
### Time on App, Time on Website and Length of membership
## Set feature 'Yearly Amount Spent' as your target variable y
## 1 point

x = numeric_df.drop(columns="Yearly Amount Spent")
y = numeric_df["Yearly Amount Spent"]

####ToDO##################################################
## Split the dataset into X_train, X_test, y_train, y_test
## by setting a test size of 0.3 (70% of the data are for training
## and 30% of the data are for testing)
## set the random_state to be 100
from sklearn.model_selection import train_test_split
## 1 points

X_train,X_test,y_train,y_test = train_test_split(x, y, test_size = 0.3, shuffle = True, random_state=100)

####################################################
## ToDO ############################################
### Train the model with Linear Regression #########
from sklearn.linear_model import LinearRegression
### Check this below to learn how to use LinearRegression()
### class:
### https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html
### 1 point

reg = LinearRegression().fit(X_train, y_train)
##reg.score(x, y)

##reg.coef_
##reg.intercept_




### Fit linear regression using your training data
### 1 point

####################################################
###ToDO#############################################
## Print out the coefficients of the fitted linear
## regression model
## 1 point

print(reg.coef_)

###ToDO#############################################
## Predict on the test data
## 1 point

y_test_pred = reg.predict(X_test)
##y_train_pred = final_model.predict(X_train)

###ToDO#############################################
## create a scatterplot between the actual observations y_test
## and the predictions
## label the x axis of the figure as "Y Test"
## label the y axis of the figure as "Predicted Y"
## 2 point

plt.scatter(y_test,y_test_pred)
plt.xlabel("Y Test")
plt.ylabel("Predicted Y")

#########################################################
###ToDO#############################################
### Evaluate the model using the metrics that we have
### learned in our class including MAE, MSE, RMSE and R2
### you can find the python code for computing each metric
### in the model evaluation slide
### 4 points
from sklearn import metrics
import numpy as np
MAE = metrics.mean_absolute_error(y_test,y_test_pred)
MSE = metrics.mean_squared_error(y_test,y_test_pred)
RMSE = np.sqrt(metrics.mean_squared_error(y_test,y_test_pred))
R2 = metrics.r2_score(y_test,y_test_pred)

print('MAE :'," ", MAE)
print('MSE :'," ", MSE)
print('RMSE :'," ",RMSE)
print('R2 :'," ",R2)

###ToDO#############################################
# Check Model Fit Assumptions by plotting the distribution
# of the residuals (predicted Y - y_test)
# use function sns.dist()
## 1 point

sns.displot(y_test_pred - y_test)

"""**Model Interpretation of Linear Regression**

Question: How to interpret the coefficients of each feature in the linear regression  (2 points)

Interpreting the coefficients for each feature in the model:


S: Avg. Session Length: should expect the avg session length to go up by 26.15532441 for 1 unit whilem all other features are fixed
Time on App: Should expext the time on app to go up by 38.62008494 for 1 unit whilem all other features are fixed
Time on Website: should expext to go up 0.31760347 for 1 unit whilem all other features are fixed
Length of Membership:v to expext to go up by 61.82039406 for 1 unit whilem all other features are fixed

"""